#!/usr/bin/env python3

import os
import sys
import subprocess
import argparse

# Add the dotfiles helpers to the Python path
sys.path.append(os.path.expanduser("~/.local/lib/python"))

try:
    from dotfiles_helpers import call_anthropic_api, extract_xml_content, edit_in_editor
except ImportError:
    print("Error: Unable to import from dotfiles_helpers.")
    print("Please ensure that the dotfiles_helpers.py file is located in ~/.local/lib/python/")
    print("If the file doesn't exist, you need to create it with the required functions.")
    sys.exit(1)

def run_command(command):
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(f"Command failed: {result.stderr}")
    return result.stdout.strip()

def main():
    parser = argparse.ArgumentParser(description="Lazy git process with AI-assisted branch naming and commit messages.")
    parser.add_argument("--smart", action="store_true", help="Use the more capable AI model")
    parser.add_argument("--commit-only", action="store_true", help="Only commit changes, skip branch creation and PR")
    args = parser.parse_args()

    if 'ANTHROPIC_API_KEY' not in os.environ:
        print("Error: ANTHROPIC_API_KEY is not set. Please set it in your environment.")
        sys.exit(1)

    if not run_command("git diff --cached --name-only"):
        print("Error: No staged files found. Please stage your changes before running this command.")
        sys.exit(1)

    # Generate branch name and commit message
    prompt = """Review these changes and suggest both a branch name and a commit message. 

    The name of the branch should be in a <branch></branch> XML tag. 
    Example branch names:
    <branch>feature/add-new-feature</branch>
    <branch>bugfix/fix-bug</branch>
    <branch>refactor/refactor-code</branch>

    The commit message should be in a <commit></commit> XML tag. The first line of the commit message will be the title of the pull request.

    Before responding, you may also think through this task. Place your thoughts in a <thought></thought> XML tag."""

    response_text = call_anthropic_api(prompt, run_command("git diff --cached"), args.smart)
    print(f"AI suggestion:\n{response_text}")

    branch_name = extract_xml_content(response_text, "branch")
    commit_message = extract_xml_content(response_text, "commit")

    if not args.commit_only:
        # Edit branch name
        final_branch_name = edit_in_editor(branch_name, f"AI suggestion:\n{response_text}")
        if final_branch_name != branch_name:
            run_command(f"git checkout -b {final_branch_name}")
        else:
            print("Using AI-suggested branch name.")

    # Edit commit message
    final_commit_message = edit_in_editor(commit_message, f"AI suggestion:\n{response_text}")
    if final_commit_message == commit_message:
        print("Using AI-suggested commit message.")

    run_command(f'git commit -m "{final_commit_message}"')

    if not args.commit_only:
        # Create and merge PR
        run_command("gh pr create --fill && gh pr merge --auto --squash")

    print("Lazy git process completed successfully!")

if __name__ == "__main__":
    main()
