#!/usr/bin/env bun

import { Command } from 'commander';
import inquirer from 'inquirer';
import ora from 'ora';
import { XMLParser } from "fast-xml-parser";
import Anthropic from "@anthropic-ai/sdk";
import chalk from "chalk";
import { $ } from "bun";
import tmp from "tmp-promise";

const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;

if (!ANTHROPIC_API_KEY) {
  console.error(chalk.red("Error: ANTHROPIC_API_KEY is not set. Please set it in your environment."));
  process.exit(1);
}

const anthropic = new Anthropic({
  apiKey: ANTHROPIC_API_KEY,
});

async function callAnthropicApi(prompt, context, useSmartModel = false) {
  const spinner = ora('Calling Anthropic API').start();
  try {
    const response = await anthropic.messages.create({
      model: useSmartModel ? "claude-3-opus-20240229" : "claude-3-haiku-20240307",
      max_tokens: 1000,
      messages: [
        {
          role: "user",
          content: `${prompt}\n\n${context}`,
        },
      ],
    });
    spinner.succeed('API call successful');
    return response.content[0].text;
  } catch (error) {
    spinner.fail('API call failed');
    throw error;
  }
}

function extractXmlContent(text, tag) {
  const parser = new XMLParser();
  const jsonObj = parser.parse(`<root>${text}</root>`);
  return jsonObj.root[tag];
}

async function editInEditor(content, commentedContent = "") {
  const editor = process.env.EDITOR || "vim";
  const { path: tempPath, cleanup } = await tmp.file();
  
  try {
    await Bun.write(tempPath, `${content}\n\n${commentedContent.split('\n').map(line => `# ${line}`).join('\n')}`);
    
    const initialStat = await Bun.file(tempPath).stat();
    await $`${editor} ${tempPath}`;
    const newStat = await Bun.file(tempPath).stat();
    
    if (newStat.mtime === initialStat.mtime) {
      return content;
    }
    
    const editedContent = await Bun.file(tempPath).text();
    return editedContent.split('\n').filter(line => !line.startsWith('#')).join('\n').trim();
  } finally {
    await cleanup();
  }
}

async function main() {
  const program = new Command();

  program
    .option('-m, --smart', 'Use smart model')
    .option('-c, --commit-only', 'Commit only, do not create branch or PR')
    .parse(process.argv);

  const options = program.opts();

  const spinner = ora('Checking staged files').start();
  const stagedFiles = await $`git diff --cached --name-only`.text();
  
  if (!stagedFiles.trim()) {
    spinner.fail('No staged files found');
    console.error(chalk.red("Error: No staged files found. Please stage your changes before running this command."));
    process.exit(1);
  }
  spinner.succeed('Found staged files');

  const prompt = `Review these changes and suggest both a branch name and a commit message. 

  The name of the branch should be in a <branch></branch> XML tag. 
  Example branch names:
  <branch>feature/add-new-feature</branch>
  <branch>bugfix/fix-bug</branch>
  <branch>refactor/refactor-code</branch>

  The commit message should be in a <commit></commit> XML tag. The first line of the commit message will be the title of the pull request.

  Before responding, you may also think through this task. Place your thoughts in a <thought></thought> XML tag.`;

  const gitDiff = await $`git diff --cached`.text();
  const responseText = await callAnthropicApi(prompt, gitDiff, options.smart);
  console.log(chalk.cyan(`AI suggestion:\n${responseText}`));

  const branchName = extractXmlContent(responseText, "branch");
  const commitMessage = extractXmlContent(responseText, "commit");

  if (!options.commitOnly) {
    const { action: branchAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'action',
        message: 'What would you like to do with the branch name?',
        choices: ['Use AI suggestion', 'Edit', 'Abort']
      }
    ]);

    if (branchAction === 'Abort') {
      console.log(chalk.yellow('Aborted.'));
      process.exit(0);
    }

    const finalBranchName = branchAction === 'Edit' 
      ? await editInEditor(branchName, `AI suggestion:\n${responseText}`)
      : branchName;

    if (finalBranchName !== branchName) {
      await $`git checkout -b ${finalBranchName}`;
    } else {
      console.log(chalk.yellow("Using AI-suggested branch name."));
    }
  }

  const { action: commitAction } = await inquirer.prompt([
    {
      type: 'list',
      name: 'action',
      message: 'What would you like to do with the commit message?',
      choices: ['Use AI suggestion', 'Edit', 'Abort']
    }
  ]);

  if (commitAction === 'Abort') {
    console.log(chalk.yellow('Aborted.'));
    process.exit(0);
  }

  const finalCommitMessage = commitAction === 'Edit'
    ? await editInEditor(commitMessage, `AI suggestion:\n${responseText}`)
    : commitMessage;

  if (finalCommitMessage === commitMessage) {
    console.log(chalk.yellow("Using AI-suggested commit message."));
  }

  await $`git commit -m ${finalCommitMessage}`;

  if (!options.commitOnly) {
    const { createPR } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'createPR',
        message: 'Do you want to create a PR?',
        default: true
      }
    ]);

    if (createPR) {
      await $`gh pr create --fill && gh pr merge --auto --squash`;
    }
  }

  console.log(chalk.green("Lazy git process completed successfully!"));
}

main().catch((error) => {
  console.error(chalk.red(`An error occurred: ${error.message}`));
  process.exit(1);
});
